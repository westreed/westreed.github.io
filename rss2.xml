<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0"
  xmlns:atom="http://www.w3.org/2005/Atom"
  xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>:AiM</title>
    <link>https://westreed.github.io/</link>
    
    <atom:link href="https://westreed.github.io/rss2.xml" rel="self" type="application/rss+xml"/>
    
    <description>갈대의 블로그</description>
    <pubDate>Thu, 12 Jan 2023 09:13:09 GMT</pubDate>
    <generator>http://hexo.io/</generator>
    
    <item>
      <title>Doc String</title>
      <link>https://westreed.github.io/2023/01/12/202301/Doc-String/</link>
      <guid>https://westreed.github.io/2023/01/12/202301/Doc-String/</guid>
      <pubDate>Thu, 12 Jan 2023 08:55:59 GMT</pubDate>
      
        
        
      <description>&lt;h2 id=&quot;함수에서-쓰이는-주석의-용도&quot;&gt;&lt;a href=&quot;#함수에서-쓰이는-주석의-용도&quot; class=&quot;headerlink&quot; title=&quot;함수에서 쓰이는 주석의 용도&quot;&gt;&lt;/a&gt;함수에서 쓰이는 주석의 용도&lt;/h2&gt;&lt;p&gt;&lt;span style=&quot;backg</description>
        
      
      
      
      <content:encoded><![CDATA[<h2 id="함수에서-쓰이는-주석의-용도"><a href="#함수에서-쓰이는-주석의-용도" class="headerlink" title="함수에서 쓰이는 주석의 용도"></a>함수에서 쓰이는 주석의 용도</h2><p><span style="background:#fff88f">Doc String</span>은 함수에 대한 힌트를 주석으로 달아서, 해당 함수를 사용할 때 힌트로 제공됩니다. 언어에 따라 다를 수 있지만 타입힌트도 가능하기 때문에 매우 유용합니다.</p><h3 id="파이썬"><a href="#파이썬" class="headerlink" title="파이썬"></a>파이썬</h3><p>파이썬에서 Doc String은 아래의 코드 형태처럼 사용할 수 있습니다.</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">함수명</span>():</span><br><span class="line">    <span class="string">&#x27;&#x27;&#x27; 내용 &#x27;&#x27;&#x27;</span> <span class="comment"># → 주석안에 특정 규칙에 맞게 작성해둔 docstring을 파싱한다.</span></span><br></pre></td></tr></table></figure><p>하지만 단순 함수 설명 이외에도 인자와 return에 대해서도 명시하는게 좋습니다.<br>양식은 여러가지가 있는데, 아래의 코드는 구글(Google)에서 사용되는 양식입니다.<br>출처 <a href="https://github.com/googleapis/google-api-python-client/blob/f110f69ecbd8ce49a254a6484494ad5f2ebce0b1/samples-index.py#L65-L83">깃허브 google-api-python-client</a></p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">get_lines</span>(<span class="params">name, lines</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;Return lines that begin with name.</span></span><br><span class="line"><span class="string">    </span></span><br><span class="line"><span class="string">    Lines are expected to look like:</span></span><br><span class="line"><span class="string">        name: space separated values</span></span><br><span class="line"><span class="string">        </span></span><br><span class="line"><span class="string">    Args:</span></span><br><span class="line"><span class="string">        name: string, parameter name.</span></span><br><span class="line"><span class="string">        lines: iterable of string, lines in the file.</span></span><br><span class="line"><span class="string">    </span></span><br><span class="line"><span class="string">    Returns:</span></span><br><span class="line"><span class="string">        List of values in the lines that match.</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">    retval = []</span><br><span class="line">    matches = itertools.ifilter(<span class="keyword">lambda</span> x: x.startswith(name + <span class="string">&quot;:&quot;</span>), lines)</span><br><span class="line">    <span class="keyword">for</span> line <span class="keyword">in</span> matches:</span><br><span class="line">        retval.extend(line[<span class="built_in">len</span>(name) + <span class="number">1</span> :].split())</span><br><span class="line">    <span class="keyword">return</span> retval</span><br></pre></td></tr></table></figure><p>함수를 작성하면, 아래와 같이 힌트가 나옵니다. (<code>vscode 환경에서 테스트됨</code>)<br><img src="https://cdn.jsdelivr.net/gh/westreed/westreed.github.io@main/images/202301/doc_string.png?style=centerme" alt="Python Doc String"/></p><h3 id="자바스크립트"><a href="#자바스크립트" class="headerlink" title="자바스크립트"></a>자바스크립트</h3><p>JS에서 Doc String은 아래의 코드 형태처럼 사용할 수 있습니다.<br>출처 <a href="https://ko.wikipedia.org/wiki/JSDoc">위키백과 - JSDoc</a></p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">/** <span class="doctag">@class</span> Circle representing a circle. */</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Circle</span> &#123;</span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * Creates an instance of Circle.</span></span><br><span class="line"><span class="comment">   *</span></span><br><span class="line"><span class="comment">   * <span class="doctag">@author</span>: moi</span></span><br><span class="line"><span class="comment">   * <span class="doctag">@param</span> &#123;<span class="type">number</span>&#125; r The desired radius of the circle.</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params">r</span>) &#123;</span><br><span class="line">    <span class="comment">/** <span class="doctag">@private</span> */</span> <span class="variable language_">this</span>.<span class="property">radius</span> = r</span><br><span class="line">    <span class="comment">/** <span class="doctag">@private</span> */</span> <span class="variable language_">this</span>.<span class="property">circumference</span> = <span class="number">2</span> * <span class="title class_">Math</span>.<span class="property">PI</span> * r</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * Creates a new Circle from a diameter.</span></span><br><span class="line"><span class="comment">   *</span></span><br><span class="line"><span class="comment">   * <span class="doctag">@param</span> &#123;<span class="type">number</span>&#125; d The desired diameter of the circle.</span></span><br><span class="line"><span class="comment">   * <span class="doctag">@return</span> &#123;<span class="type">Circle</span>&#125; The new Circle object.</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  <span class="keyword">static</span> <span class="title function_">fromDiameter</span>(<span class="params">d</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Circle</span>(d / <span class="number">2</span>)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * Calculates the circumference of the Circle.</span></span><br><span class="line"><span class="comment">   *</span></span><br><span class="line"><span class="comment">   * <span class="doctag">@deprecated</span> since 1.1.0; use getCircumference instead</span></span><br><span class="line"><span class="comment">   * <span class="doctag">@return</span> &#123;<span class="type">number</span>&#125; The circumference of the circle.</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  <span class="title function_">calculateCircumference</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">2</span> * <span class="title class_">Math</span>.<span class="property">PI</span> * <span class="variable language_">this</span>.<span class="property">radius</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * Returns the pre-computed circumference of the Circle.</span></span><br><span class="line"><span class="comment">   *</span></span><br><span class="line"><span class="comment">   * <span class="doctag">@return</span> &#123;<span class="type">number</span>&#125; The circumference of the circle.</span></span><br><span class="line"><span class="comment">   * <span class="doctag">@since</span> 1.1.0</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  <span class="title function_">getCircumference</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">circumference</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * Find a String representation of the Circle.</span></span><br><span class="line"><span class="comment">   *</span></span><br><span class="line"><span class="comment">   * <span class="doctag">@override</span></span></span><br><span class="line"><span class="comment">   * <span class="doctag">@return</span> &#123;<span class="type">string</span>&#125; <span class="variable">Human</span>-readable representation of this Circle.</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  <span class="title function_">toString</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">`[A Circle object with radius of <span class="subst">$&#123;<span class="variable language_">this</span>.radius&#125;</span>.]`</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Prints a circle.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &#123;<span class="type">Circle</span>&#125; <span class="variable">circle</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">printCircle</span>(<span class="params">circle</span>) &#123;</span><br><span class="line">    <span class="comment">/** <span class="doctag">@this</span> &#123;<span class="type">Circle</span>&#125; */</span></span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">bound</span>(<span class="params"></span>) &#123; <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>) &#125;</span><br><span class="line">    bound.<span class="title function_">apply</span>(circle)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content:encoded>
      
      
      <category domain="https://westreed.github.io/categories/%ED%94%84%EB%A1%9C%EA%B7%B8%EB%9E%98%EB%B0%8D/">프로그래밍</category>
      
      
      <category domain="https://westreed.github.io/tags/%ED%94%84%EB%A1%9C%EA%B7%B8%EB%9E%98%EB%B0%8D/">프로그래밍</category>
      
      
      <comments>https://westreed.github.io/2023/01/12/202301/Doc-String/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>Unpacking</title>
      <link>https://westreed.github.io/2023/01/08/202301/Unpacking/</link>
      <guid>https://westreed.github.io/2023/01/08/202301/Unpacking/</guid>
      <pubDate>Sun, 08 Jan 2023 13:42:36 GMT</pubDate>
      
        
        
      <description>&lt;h2 id=&quot;Unpacking이란&quot;&gt;&lt;a href=&quot;#Unpacking이란&quot; class=&quot;headerlink&quot; title=&quot;Unpacking이란?&quot;&gt;&lt;/a&gt;Unpacking이란?&lt;/h2&gt;&lt;p&gt;&lt;span style=&quot;background:#fff88f&quot;</description>
        
      
      
      
      <content:encoded><![CDATA[<h2 id="Unpacking이란"><a href="#Unpacking이란" class="headerlink" title="Unpacking이란?"></a>Unpacking이란?</h2><p><span style="background:#fff88f">Unpacking</span>은 여러개의 객체를 포함하고 있는 하나의 객체를 풀어줍니다.<br>파이썬으로 코드를 짜다보면 다음과 같은 상황이 있습니다.</p><blockquote><p>입력 받은 list에서 첫번째, 마지막 값만 가져오기<br>혹은 반대로 입력 받은 list에서 첫번째, 마지막 값을 제외하기</p></blockquote><p>파이썬은 해당 상황을 쉽게 해결 할 수 있습니다.</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">lists = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>]</span><br><span class="line">first, *rest, last = lists</span><br><span class="line"><span class="built_in">print</span>(first, last)</span><br><span class="line"><span class="comment"># 1 5</span></span><br><span class="line"><span class="built_in">print</span>(rest)</span><br><span class="line"><span class="comment"># [2, 3, 4]</span></span><br></pre></td></tr></table></figure><p>rest 앞에 <code>*(asterisk)</code>가 보이시나요?<br>파이썬에서는 <code>*(asterisk)</code>를 다음과 같은 상황에 사용합니다.</p><ul><li>곱셈, 거듭제곱</li><li>List형 컨테이너를 반복해서 확장</li><li>가변 인자</li><li>Unpacking</li></ul><p>위의 코드에서 rest에 사용된 방법은 가변인자 입니다. 즉, 인자의 갯수가 몇개가 될지 확실하지 않을때 사용하는 거죠.</p><p>그런데 글제목은 Unpacking 이죠. Unpacking은 무엇일까요?</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">lists = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>]</span><br><span class="line"><span class="keyword">for</span> num <span class="keyword">in</span> lists:</span><br><span class="line">    <span class="built_in">print</span>(num, end=<span class="string">&#x27; &#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 출력결과</span></span><br><span class="line"><span class="comment"># 1 2 3 4 5</span></span><br></pre></td></tr></table></figure><p>​<br>위의 코드는 lists 안의 내용물을 나열해서 출력하는 평범한 코드입니다.<br>그리고 아래의 코드 방식으로도 같은 결과를 출력할 수 있습니다.</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">lists = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>]</span><br><span class="line"><span class="built_in">print</span>(*lists)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 출력결과</span></span><br><span class="line"><span class="comment"># 1 2 3 4 5</span></span><br></pre></td></tr></table></figure><p>같은 결과를 출력하죠? 이것을 <span style="background:#fff88f">List Unpacking</span> 이라고 합니다.</p>]]></content:encoded>
      
      
      <category domain="https://westreed.github.io/categories/%ED%94%84%EB%A1%9C%EA%B7%B8%EB%9E%98%EB%B0%8D/">프로그래밍</category>
      
      <category domain="https://westreed.github.io/categories/%ED%94%84%EB%A1%9C%EA%B7%B8%EB%9E%98%EB%B0%8D/Python/">Python</category>
      
      
      <category domain="https://westreed.github.io/tags/%ED%94%84%EB%A1%9C%EA%B7%B8%EB%9E%98%EB%B0%8D/">프로그래밍</category>
      
      <category domain="https://westreed.github.io/tags/Python/">Python</category>
      
      
      <comments>https://westreed.github.io/2023/01/08/202301/Unpacking/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>yield와 제너레이터</title>
      <link>https://westreed.github.io/2023/01/08/202301/yield%EC%99%80-%EC%A0%9C%EB%84%88%EB%A0%88%EC%9D%B4%ED%84%B0/</link>
      <guid>https://westreed.github.io/2023/01/08/202301/yield%EC%99%80-%EC%A0%9C%EB%84%88%EB%A0%88%EC%9D%B4%ED%84%B0/</guid>
      <pubDate>Sun, 08 Jan 2023 13:39:04 GMT</pubDate>
      
        
        
      <description>&lt;h2 id=&quot;yield와-제너레이터&quot;&gt;&lt;a href=&quot;#yield와-제너레이터&quot; class=&quot;headerlink&quot; title=&quot;yield와 제너레이터&quot;&gt;&lt;/a&gt;yield와 제너레이터&lt;/h2&gt;&lt;p&gt;함수 안에서 yield를 사용하면 함수는 &lt;strong</description>
        
      
      
      
      <content:encoded><![CDATA[<h2 id="yield와-제너레이터"><a href="#yield와-제너레이터" class="headerlink" title="yield와 제너레이터"></a>yield와 제너레이터</h2><p>함수 안에서 yield를 사용하면 함수는 <strong>제너레이터</strong>가 되며 yield에는 값(변수)을 지정합니다.</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">sample</span>():</span><br><span class="line">    <span class="keyword">yield</span> <span class="string">&#x27;a&#x27;</span></span><br><span class="line">    <span class="keyword">yield</span> <span class="number">1</span></span><br><span class="line">    <span class="keyword">yield</span> <span class="number">1.5</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> sample():</span><br><span class="line">    <span class="built_in">print</span>(i)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 출력결과</span></span><br><span class="line"><span class="comment"># a</span></span><br><span class="line"><span class="comment"># 1</span></span><br><span class="line"><span class="comment"># 1.5</span></span><br></pre></td></tr></table></figure><p>for 반복문에 sample()를 지정해서 값을 출력해보면 yield에 지정했던 a, 1, 1.5가 나옵니다.<br>제너레이터는 이터레이터를 생성해주는 함수로, 이터레이터와 사용법이 같습니다.</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">sample</span>():</span><br><span class="line">   <span class="keyword">yield</span> <span class="string">&#x27;a&#x27;</span></span><br><span class="line">   <span class="keyword">yield</span> <span class="number">1</span></span><br><span class="line">   <span class="keyword">yield</span> <span class="number">1.5</span></span><br><span class="line"></span><br><span class="line">s = sample() <span class="comment"># yield를 사용하여 함수 바깥으로 전달한 값은 next의 반환값으로 나옴</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">next</span>(s))</span><br><span class="line"><span class="comment"># a</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">next</span>(s))</span><br><span class="line"><span class="comment"># 1</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">next</span>(s))</span><br><span class="line"><span class="comment"># 1.5</span></span><br></pre></td></tr></table></figure><p>제너레이터는 함수 끝까지 도달하면 <strong>StopIteration 예외</strong>가 발생합니다. 마찬가지로 return도 함수를 끝내므로 return을 사용해서 함수 중간에 빠져나오면 StopIteration 예외가 발생합니다.</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">sample</span>():</span><br><span class="line">   <span class="keyword">yield</span> <span class="string">&#x27;a&#x27;</span></span><br><span class="line">   <span class="keyword">yield</span> <span class="number">1</span></span><br><span class="line">   <span class="keyword">yield</span> <span class="number">1.5</span></span><br><span class="line">   <span class="keyword">return</span> <span class="string">&#x27;return 값&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    s = sample() <span class="comment"># yield를 사용하여 함수 바깥으로 전달한 값은 next의 반환값으로 나옴</span></span><br><span class="line">    <span class="built_in">next</span>(s) <span class="comment"># a</span></span><br><span class="line">    <span class="built_in">next</span>(s) <span class="comment"># 1</span></span><br><span class="line">    <span class="built_in">next</span>(s) <span class="comment"># 1.5</span></span><br><span class="line">    <span class="built_in">next</span>(s) <span class="comment"># 예외발생!</span></span><br><span class="line"><span class="keyword">except</span> StopIteration <span class="keyword">as</span> e:</span><br><span class="line">    <span class="built_in">print</span>(e)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 출력결과</span></span><br><span class="line"><span class="comment"># return 값</span></span><br></pre></td></tr></table></figure>]]></content:encoded>
      
      
      <category domain="https://westreed.github.io/categories/%ED%94%84%EB%A1%9C%EA%B7%B8%EB%9E%98%EB%B0%8D/">프로그래밍</category>
      
      <category domain="https://westreed.github.io/categories/%ED%94%84%EB%A1%9C%EA%B7%B8%EB%9E%98%EB%B0%8D/Python/">Python</category>
      
      
      <category domain="https://westreed.github.io/tags/%ED%94%84%EB%A1%9C%EA%B7%B8%EB%9E%98%EB%B0%8D/">프로그래밍</category>
      
      <category domain="https://westreed.github.io/tags/Python/">Python</category>
      
      
      <comments>https://westreed.github.io/2023/01/08/202301/yield%EC%99%80-%EC%A0%9C%EB%84%88%EB%A0%88%EC%9D%B4%ED%84%B0/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>파이썬 클래스 정렬</title>
      <link>https://westreed.github.io/2023/01/06/202301/%ED%8C%8C%EC%9D%B4%EC%8D%AC-%ED%81%B4%EB%9E%98%EC%8A%A4-%EC%A0%95%EB%A0%AC/</link>
      <guid>https://westreed.github.io/2023/01/06/202301/%ED%8C%8C%EC%9D%B4%EC%8D%AC-%ED%81%B4%EB%9E%98%EC%8A%A4-%EC%A0%95%EB%A0%AC/</guid>
      <pubDate>Fri, 06 Jan 2023 14:00:00 GMT</pubDate>
      
        
        
      <description>&lt;h2 id=&quot;클래스-객체를-정렬하기&quot;&gt;&lt;a href=&quot;#클래스-객체를-정렬하기&quot; class=&quot;headerlink&quot; title=&quot;클래스 객체를 정렬하기&quot;&gt;&lt;/a&gt;클래스 객체를 정렬하기&lt;/h2&gt;&lt;p&gt;리스트 안의 내용물을 클래스 객체로 만들어서, 정렬하고</description>
        
      
      
      
      <content:encoded><![CDATA[<h2 id="클래스-객체를-정렬하기"><a href="#클래스-객체를-정렬하기" class="headerlink" title="클래스 객체를 정렬하기"></a>클래스 객체를 정렬하기</h2><p>리스트 안의 내용물을 클래스 객체로 만들어서, 정렬하고자 할 때 쓰이는 방법입니다.</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Data</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, value</span>):</span><br><span class="line">        self.value = value</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__lt__</span>(<span class="params">self, other</span>): <span class="comment">#정렬의 기준을 정함</span></span><br><span class="line">        <span class="keyword">return</span> self.value &lt; other.value</span><br><span class="line"></span><br><span class="line">DataList = []</span><br><span class="line">DataList.append(Data(<span class="number">5</span>))</span><br><span class="line">DataList.append(Data(<span class="number">3</span>))</span><br><span class="line">DataList.append(Data(<span class="number">7</span>))</span><br><span class="line">DataList.append(Data(<span class="number">1</span>))</span><br><span class="line"></span><br><span class="line">DataList.sort()</span><br></pre></td></tr></table></figure><h2 id="sort에서-key값-이용해서-정렬하기"><a href="#sort에서-key값-이용해서-정렬하기" class="headerlink" title="sort에서 key값 이용해서 정렬하기"></a>sort에서 key값 이용해서 정렬하기</h2><p>다른 방법으로 sort의 key값을 직접 정해줄 수 있습니다.</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Data</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, value</span>):</span><br><span class="line">        self.value = value</span><br><span class="line"></span><br><span class="line">DataList = []</span><br><span class="line">DataList.append(Data(<span class="number">5</span>))</span><br><span class="line">DataList.append(Data(<span class="number">3</span>))</span><br><span class="line">DataList.append(Data(<span class="number">7</span>))</span><br><span class="line">DataList.append(Data(<span class="number">1</span>))</span><br><span class="line"></span><br><span class="line">DataList.sort(key=<span class="keyword">lambda</span> x: x.value) <span class="comment"># 클래스 안에서 정렬의 기준으로 삼을 변수 지정</span></span><br></pre></td></tr></table></figure>]]></content:encoded>
      
      
      <category domain="https://westreed.github.io/categories/%ED%94%84%EB%A1%9C%EA%B7%B8%EB%9E%98%EB%B0%8D/">프로그래밍</category>
      
      <category domain="https://westreed.github.io/categories/%ED%94%84%EB%A1%9C%EA%B7%B8%EB%9E%98%EB%B0%8D/Python/">Python</category>
      
      
      <category domain="https://westreed.github.io/tags/%ED%94%84%EB%A1%9C%EA%B7%B8%EB%9E%98%EB%B0%8D/">프로그래밍</category>
      
      <category domain="https://westreed.github.io/tags/Python/">Python</category>
      
      
      <comments>https://westreed.github.io/2023/01/06/202301/%ED%8C%8C%EC%9D%B4%EC%8D%AC-%ED%81%B4%EB%9E%98%EC%8A%A4-%EC%A0%95%EB%A0%AC/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>재귀(Recursion)와 분할정복(Divide and Conquer)</title>
      <link>https://westreed.github.io/2023/01/05/202301/%EC%9E%AC%EA%B7%80(Recursion)%EC%99%80-%EB%B6%84%ED%95%A0%EC%A0%95%EB%B3%B5(Divide-and-Conquer)/</link>
      <guid>https://westreed.github.io/2023/01/05/202301/%EC%9E%AC%EA%B7%80(Recursion)%EC%99%80-%EB%B6%84%ED%95%A0%EC%A0%95%EB%B3%B5(Divide-and-Conquer)/</guid>
      <pubDate>Thu, 05 Jan 2023 13:36:45 GMT</pubDate>
      
        
        
      <description>&lt;h2 id=&quot;재귀-Recursion&quot;&gt;&lt;a href=&quot;#재귀-Recursion&quot; class=&quot;headerlink&quot; title=&quot;재귀 (Recursion)&quot;&gt;&lt;/a&gt;재귀 (Recursion)&lt;/h2&gt;&lt;p&gt;재귀함수는 함수의 내부에서 자기 자신을 다시 호</description>
        
      
      
      
      <content:encoded><![CDATA[<h2 id="재귀-Recursion"><a href="#재귀-Recursion" class="headerlink" title="재귀 (Recursion)"></a>재귀 (Recursion)</h2><p>재귀함수는 함수의 내부에서 자기 자신을 다시 호출하는 함수를 뜻한다.<br>ex) 피보나치 수열, 팩토리얼 구현 등</p><p>일반적인 재귀 함수의 특징<br><strong>1. 함수의 호출이 트리 구조를 가진다.</strong><br>(트리란 사이클이 없는 연결 그래프를 의미)</p><p><strong>2. 재귀적으로 함수를 호출하는 대신 바로 함수를 종료하는 기저 사례(base case)를 가진다.</strong><br>(기저 사례는 트리의 리프 노드(&#x3D; 자식 노드가 없는 노드)에 해당)</p><h2 id="분할-정복-Divide-and-Conquer"><a href="#분할-정복-Divide-and-Conquer" class="headerlink" title="분할 정복 (Divide and Conquer)"></a>분할 정복 (Divide and Conquer)</h2><p>큰 문제를 작은 문제로 분할(divide)하고 나눠진 작은 문제를 하나하나씩 정복(conquer)하여, 작은 문제의 답으로 큰 문제의 답을 구하는 것을 분할정복이라고 합니다.</p><p>이때 기저 사례(base case)를 둬서 더 이상 Divide하지 않고 바로 답을 구하는 기저 사례를 만들면 문제를 쪼갠 뒤 합치는 과정을 통해 원래 문제의 답을 구할 수 있다. 이러한 분할 정복의 구조 때문에 거의 대부분 분할 정복은 재귀로 구현된다.</p><h2 id="중복-제거-Memoization-amp-Tabulation"><a href="#중복-제거-Memoization-amp-Tabulation" class="headerlink" title="중복 제거 (Memoization &amp; Tabulation)"></a>중복 제거 (Memoization &amp; Tabulation)</h2><p>재귀함수는 알고리즘을 간단히 축약할 수 있다는 장점이 있지만, 스택 오버 플로어 문제와 런타임이 비교적 오래 걸린다는 단점이 있다. 단점을 극복하기 위해, Memoization과 Tabulation 이 두 개는 메모리를 더 사용하는 대신, 계산 시간을 줄인다.</p><p>예를 들어, 다음과 같은 피보나치 수열을 구하는 예제가 있다.</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">fibonacci</span>(<span class="params">num</span>):</span><br><span class="line">    <span class="keyword">if</span> num == <span class="number">1</span> <span class="keyword">or</span> num == <span class="number">2</span>: <span class="keyword">return</span> <span class="number">1</span></span><br><span class="line">    <span class="keyword">return</span> fibonacci(num - <span class="number">1</span>) + fibonacci(num - <span class="number">2</span>)</span><br></pre></td></tr></table></figure><h3 id="Memoization"><a href="#Memoization" class="headerlink" title="Memoization"></a>Memoization</h3><p>재귀함수에서 일어나는 중복 계산을 피하기 위한 방법이다. 피보나치를 계산해서 배열에 저장해놓고, 필요할 때 이용한다. 오버헤드는 발생하지 않는다. 런타임 시간은 줄고, 메모리 사용은 증가한다는 특징이 있다.</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">record = [<span class="number">0</span> <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">50</span>)]</span><br><span class="line">record[<span class="number">0</span>] = <span class="number">1</span></span><br><span class="line">record[<span class="number">1</span>] = <span class="number">1</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">fibonacci</span>(<span class="params">num</span>):</span><br><span class="line">    <span class="keyword">global</span> record</span><br><span class="line">    index = num - <span class="number">1</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span> record[index] == <span class="number">0</span>:</span><br><span class="line">        record[index] = fibonacci(num - <span class="number">1</span>) + fibonacci(num - <span class="number">2</span>)</span><br><span class="line">    <span class="keyword">return</span> record[index]</span><br></pre></td></tr></table></figure><p>값이 리스트에 저장해되어 있기 때문에 중복 계산을 생략할 수 있다.</p><h3 id="Tabulation"><a href="#Tabulation" class="headerlink" title="Tabulation"></a>Tabulation</h3><p>Memoiation과 동일하게 함수 중복을 줄여주는 방식. 다른 점이라면 미리 피보나치를 필요한 만큼 계산해두고 꺼내쓰는 방식이다.</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">record = [<span class="number">0</span> <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">50</span>)]</span><br><span class="line">record[<span class="number">0</span>] = <span class="number">1</span></span><br><span class="line">record[<span class="number">1</span>] = <span class="number">1</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">fibonacci_table</span>():</span><br><span class="line">    <span class="keyword">global</span> record</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">2</span>, <span class="number">50</span>):</span><br><span class="line">        record[i] = record[i-<span class="number">1</span>] + record[i-<span class="number">2</span>]</span><br><span class="line"></span><br><span class="line">fibonacci_table()</span><br></pre></td></tr></table></figure>]]></content:encoded>
      
      
      <category domain="https://westreed.github.io/categories/%EC%95%8C%EA%B3%A0%EB%A6%AC%EC%A6%98/">알고리즘</category>
      
      
      <category domain="https://westreed.github.io/tags/%ED%94%84%EB%A1%9C%EA%B7%B8%EB%9E%98%EB%B0%8D/">프로그래밍</category>
      
      <category domain="https://westreed.github.io/tags/Python/">Python</category>
      
      <category domain="https://westreed.github.io/tags/%EC%95%8C%EA%B3%A0%EB%A6%AC%EC%A6%98/">알고리즘</category>
      
      
      <comments>https://westreed.github.io/2023/01/05/202301/%EC%9E%AC%EA%B7%80(Recursion)%EC%99%80-%EB%B6%84%ED%95%A0%EC%A0%95%EB%B3%B5(Divide-and-Conquer)/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>위상정렬 (Topology Sort)</title>
      <link>https://westreed.github.io/2023/01/05/202301/%EC%9C%84%EC%83%81%EC%A0%95%EB%A0%AC-(Topology-Sort)/</link>
      <guid>https://westreed.github.io/2023/01/05/202301/%EC%9C%84%EC%83%81%EC%A0%95%EB%A0%AC-(Topology-Sort)/</guid>
      <pubDate>Thu, 05 Jan 2023 13:15:32 GMT</pubDate>
      
        
        
      <description>&lt;h2 id=&quot;위상정렬-Topology-Sort&quot;&gt;&lt;a href=&quot;#위상정렬-Topology-Sort&quot; class=&quot;headerlink&quot; title=&quot;위상정렬 (Topology Sort)&quot;&gt;&lt;/a&gt;위상정렬 (Topology Sort)&lt;/h2&gt;&lt;div </description>
        
      
      
      
      <content:encoded><![CDATA[<h2 id="위상정렬-Topology-Sort"><a href="#위상정렬-Topology-Sort" class="headerlink" title="위상정렬 (Topology Sort)"></a>위상정렬 (Topology Sort)</h2><div class="video-container"><iframe src="https://www.youtube.com/embed/qzfeVeajuyc" frameborder="0" loading="lazy" allowfullscreen></iframe></div><h2 id="예시코드"><a href="#예시코드" class="headerlink" title="예시코드"></a>예시코드</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> collections <span class="keyword">import</span> deque</span><br><span class="line"></span><br><span class="line">MAX     = <span class="number">8</span></span><br><span class="line">degrees = [<span class="number">0</span> <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(MAX)]</span><br><span class="line">graphs  = [[] <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(MAX)]</span><br><span class="line">text    = [</span><br><span class="line">    <span class="number">0</span>, <span class="string">&#x27;대학생 되기&#x27;</span>, <span class="string">&#x27;4학년 되기&#x27;</span>, <span class="string">&#x27;정보처리기사 합격하기&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;자격 서류 제출하기&#x27;</span>,<span class="string">&#x27;학과 사이트 가입하기&#x27;</span>, <span class="string">&#x27;졸업시험 신청하기&#x27;</span>, <span class="string">&#x27;졸업하기&#x27;</span></span><br><span class="line">]</span><br><span class="line">result  = <span class="string">&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">addLine</span>(<span class="params">node1, node2</span>):</span><br><span class="line">    graphs[node1].append(node2)</span><br><span class="line">    degrees[node2] += <span class="number">1</span></span><br><span class="line"></span><br><span class="line">addLine(<span class="number">1</span>, <span class="number">2</span>)</span><br><span class="line">addLine(<span class="number">2</span>, <span class="number">3</span>)</span><br><span class="line">addLine(<span class="number">3</span>, <span class="number">4</span>)</span><br><span class="line">addLine(<span class="number">1</span>, <span class="number">5</span>)</span><br><span class="line">addLine(<span class="number">5</span>, <span class="number">6</span>)</span><br><span class="line">addLine(<span class="number">4</span>, <span class="number">6</span>)</span><br><span class="line">addLine(<span class="number">6</span>, <span class="number">7</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(degrees) <span class="comment"># [0, 0, 1, 1, 1, 1, 2, 1]</span></span><br><span class="line"><span class="built_in">print</span>(graphs)  <span class="comment"># [[], [2, 5], [3], [4], [6], [6], [7], []]</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">topologySort</span>():</span><br><span class="line">    <span class="keyword">global</span> result</span><br><span class="line">    queue = deque()</span><br><span class="line">    <span class="comment"># 진입차수가 0인 노드 찾기</span></span><br><span class="line">    <span class="keyword">for</span> n <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>,MAX):</span><br><span class="line">        <span class="keyword">if</span> degrees[n] == <span class="number">0</span>:</span><br><span class="line">            queue.append(n)</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span> n <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>,MAX):</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> queue:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;사이클 발생&quot;</span>)</span><br><span class="line">            <span class="keyword">return</span></span><br><span class="line">        node = queue.popleft()</span><br><span class="line">        result += <span class="string">f&#x27;<span class="subst">&#123;text[node]&#125;</span>&#x27;</span></span><br><span class="line">        <span class="keyword">if</span> n != MAX-<span class="number">1</span>: result += <span class="string">f&#x27; → &#x27;</span></span><br><span class="line">        <span class="keyword">for</span> x <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(graphs[node])):</span><br><span class="line">            <span class="built_in">next</span> = graphs[node][x]</span><br><span class="line">            degrees[<span class="built_in">next</span>] -= <span class="number">1</span></span><br><span class="line">            <span class="keyword">if</span> degrees[<span class="built_in">next</span>] == <span class="number">0</span>:</span><br><span class="line">                queue.append(<span class="built_in">next</span>)</span><br><span class="line">    <span class="built_in">print</span>(result)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">topologySort()</span><br></pre></td></tr></table></figure><h2 id="결과"><a href="#결과" class="headerlink" title="결과"></a>결과</h2><p>대학생 되기 → 4학년 되기 → 학과 사이트 가입하기 → 정보처리기사 합격하기 → 자격 서류 제출하기 → 졸업시험 신청하기 → 졸업하기</p>]]></content:encoded>
      
      
      <category domain="https://westreed.github.io/categories/%EC%95%8C%EA%B3%A0%EB%A6%AC%EC%A6%98/">알고리즘</category>
      
      
      <category domain="https://westreed.github.io/tags/%ED%94%84%EB%A1%9C%EA%B7%B8%EB%9E%98%EB%B0%8D/">프로그래밍</category>
      
      <category domain="https://westreed.github.io/tags/Python/">Python</category>
      
      <category domain="https://westreed.github.io/tags/%EC%95%8C%EA%B3%A0%EB%A6%AC%EC%A6%98/">알고리즘</category>
      
      
      <comments>https://westreed.github.io/2023/01/05/202301/%EC%9C%84%EC%83%81%EC%A0%95%EB%A0%AC-(Topology-Sort)/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>딕셔너리의 type을 지정할 수 있는 defaultdict()</title>
      <link>https://westreed.github.io/2023/01/03/202301/%EB%94%95%EC%85%94%EB%84%88%EB%A6%AC%EC%9D%98-type%EC%9D%84-%EC%A7%80%EC%A0%95%ED%95%A0-%EC%88%98-%EC%9E%88%EB%8A%94-defaultdict()/</link>
      <guid>https://westreed.github.io/2023/01/03/202301/%EB%94%95%EC%85%94%EB%84%88%EB%A6%AC%EC%9D%98-type%EC%9D%84-%EC%A7%80%EC%A0%95%ED%95%A0-%EC%88%98-%EC%9E%88%EB%8A%94-defaultdict()/</guid>
      <pubDate>Tue, 03 Jan 2023 08:02:20 GMT</pubDate>
      
        
        
      <description>&lt;h2 id=&quot;딕셔너리&quot;&gt;&lt;a href=&quot;#딕셔너리&quot; class=&quot;headerlink&quot; title=&quot;딕셔너리?&quot;&gt;&lt;/a&gt;딕셔너리?&lt;/h2&gt;&lt;p&gt;파이썬은 ‘딕셔너리’라는 연관 배열(Associative array) 자료형을 지원합니다.&lt;br&gt;예시로,&lt;/</description>
        
      
      
      
      <content:encoded><![CDATA[<h2 id="딕셔너리"><a href="#딕셔너리" class="headerlink" title="딕셔너리?"></a>딕셔너리?</h2><p>파이썬은 ‘딕셔너리’라는 연관 배열(Associative array) 자료형을 지원합니다.<br>예시로,</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">dict_a = &#123;&#125; <span class="comment">#빈 딕셔너리</span></span><br><span class="line">dict_a[<span class="string">&#x27;key&#x27;</span>] = <span class="string">&#x27;value&#x27;</span></span><br><span class="line"><span class="built_in">print</span>(dict_a)</span><br><span class="line"><span class="comment"># &#123;&#x27;key&#x27;: &#x27;value&#x27;&#125;</span></span><br></pre></td></tr></table></figure><p>이렇게 { } 로 둘러쌓여있고, 각각의 요소는 Key : Value 형태로 이루어져 있습니다.</p><p>defaultdict()는 작동하는 방식이 거의 비슷하지만, 주어진 객체의 기본값을 딕셔너리 값의 초기값으로 지정할 수 있습니다. int, list, set 등으로 초기화 할 수 있기 때문에 다양한 용도로 사용할 수 있습니다.</p><p>기본적인 사용법은</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> collections <span class="keyword">import</span> defaultdict <span class="comment">#외부함수이기 때문에, 임포트해야 함.</span></span><br><span class="line">int_dict = defaultdict(<span class="built_in">int</span>)</span><br><span class="line"><span class="built_in">print</span>(int_dict)</span><br><span class="line"><span class="comment"># defaultdict(&lt;class &#x27;int&#x27;&gt;, &#123;&#125;)</span></span><br></pre></td></tr></table></figure><p>collections 안에서 defaultdict을 import 해서 쓰면 됩니다.</p><p>‘defaultdict’ 라는 말 그대로 처음 키를 지정할 때 값을 주지 않으면 해당 키에 대한 값(value)의 디폴트 값을 지정하겠다는 뜻입니다.</p><h2 id="언제-필요할까"><a href="#언제-필요할까" class="headerlink" title="언제 필요할까?"></a>언제 필요할까?</h2><p>그렇다면, 이 defaultdict()는 어느 상황에서 사용되면 좋을까요?<br>레퍼런스 문서에서 살펴보면, 다음과 같은 예제들이 등장합니다.</p><p>​<a href="https://docs.python.org/ko/3.8/library/collections.html?highlight=defaultdict#collections.defaultdict">https://docs.python.org/ko/3.8/library/collections.html?highlight=defaultdict#collections.defaultdict</a></p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">s = [(<span class="string">&#x27;yellow&#x27;</span>, <span class="number">1</span>), (<span class="string">&#x27;blue&#x27;</span>, <span class="number">2</span>), (<span class="string">&#x27;yellow&#x27;</span>, <span class="number">3</span>), (<span class="string">&#x27;blue&#x27;</span>, <span class="number">4</span>), (<span class="string">&#x27;red&#x27;</span>, <span class="number">1</span>)]</span><br><span class="line">d = defaultdict(<span class="built_in">list</span>)</span><br><span class="line"><span class="keyword">for</span> k, v <span class="keyword">in</span> s:</span><br><span class="line">    d[k].append(v)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">sorted</span>(d.items()))</span><br><span class="line"><span class="comment"># [(&#x27;blue&#x27;, [2, 4]), (&#x27;red&#x27;, [1]), (&#x27;yellow&#x27;, [1, 3])]</span></span><br></pre></td></tr></table></figure><p>첫번째 예제를 살펴보면, defaultdict(list)과 같이 초기값을 리스트로 선언하여 리스트의 내용물을 매우 쉽게 분류합니다. 색상의 갯수를 셀 수 있는 것 뿐만 아니라, 각 색상별로 가지는 값을 리스트로 저장합니다.</p><p>단순히 예제만 보면, defaultdict을 사용해서 어떤 점에서 이득을 봤는지 알 수 없겠죠?</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">s = [(<span class="string">&#x27;yellow&#x27;</span>, <span class="number">1</span>), (<span class="string">&#x27;blue&#x27;</span>, <span class="number">2</span>), (<span class="string">&#x27;yellow&#x27;</span>, <span class="number">3</span>), (<span class="string">&#x27;blue&#x27;</span>, <span class="number">4</span>), (<span class="string">&#x27;red&#x27;</span>, <span class="number">1</span>)]</span><br><span class="line">d = &#123;&#125; <span class="comment">#defaultdict이 아닌 기본 딕셔너리</span></span><br><span class="line"><span class="keyword">for</span> k, v <span class="keyword">in</span> s:</span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> k <span class="keyword">in</span> d:</span><br><span class="line">        d[k] = [] <span class="comment">#해당 키가 없으면, 리스트로 초기화</span></span><br><span class="line">    d[k].append(v)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">sorted</span>(d.items()))</span><br><span class="line"><span class="comment"># [(&#x27;blue&#x27;, [2, 4]), (&#x27;red&#x27;, [1]), (&#x27;yellow&#x27;, [1, 3])]</span></span><br></pre></td></tr></table></figure><p>위와 같이 키가 존재하는지 검사하는 코드와 리스트로 초기화하는 코드가 추가로 필요합니다.</p><p>마지막으로 다른 예제 하나를 더 참고해보면,</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">s = <span class="string">&#x27;mississippi&#x27;</span></span><br><span class="line">d = defaultdict(<span class="built_in">int</span>)</span><br><span class="line"><span class="keyword">for</span> k <span class="keyword">in</span> s:</span><br><span class="line">    d[k] += <span class="number">1</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">sorted</span>(d.items()))</span><br><span class="line"><span class="comment"># [(&#x27;i&#x27;, 4), (&#x27;m&#x27;, 1), (&#x27;p&#x27;, 2), (&#x27;s&#x27;, 4)]</span></span><br></pre></td></tr></table></figure><p>이번 예제는 주어진 문자열을 알파벳으로 분류하여 갯수를 카운트합니다.<br>이 역시 defaultdict()을 사용하지 않고, 만드려면 if를 통해 추가적인 검사코드와 초기화코드가 필요합니다.</p>]]></content:encoded>
      
      
      <category domain="https://westreed.github.io/categories/%ED%94%84%EB%A1%9C%EA%B7%B8%EB%9E%98%EB%B0%8D/">프로그래밍</category>
      
      <category domain="https://westreed.github.io/categories/%ED%94%84%EB%A1%9C%EA%B7%B8%EB%9E%98%EB%B0%8D/Python/">Python</category>
      
      
      <category domain="https://westreed.github.io/tags/%ED%94%84%EB%A1%9C%EA%B7%B8%EB%9E%98%EB%B0%8D/">프로그래밍</category>
      
      <category domain="https://westreed.github.io/tags/Python/">Python</category>
      
      
      <comments>https://westreed.github.io/2023/01/03/202301/%EB%94%95%EC%85%94%EB%84%88%EB%A6%AC%EC%9D%98-type%EC%9D%84-%EC%A7%80%EC%A0%95%ED%95%A0-%EC%88%98-%EC%9E%88%EB%8A%94-defaultdict()/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>for-else문 활용하기</title>
      <link>https://westreed.github.io/2023/01/03/202301/for-else%EB%AC%B8-%ED%99%9C%EC%9A%A9%ED%95%98%EA%B8%B0/</link>
      <guid>https://westreed.github.io/2023/01/03/202301/for-else%EB%AC%B8-%ED%99%9C%EC%9A%A9%ED%95%98%EA%B8%B0/</guid>
      <pubDate>Tue, 03 Jan 2023 06:17:24 GMT</pubDate>
      
        
        
      <description>&lt;h2 id=&quot;for-else문&quot;&gt;&lt;a href=&quot;#for-else문&quot; class=&quot;headerlink&quot; title=&quot;for-else문?&quot;&gt;&lt;/a&gt;for-else문?&lt;/h2&gt;&lt;p&gt;파이썬에는 특이하게 for-else문이 존재합니다.&lt;br&gt;어떻게 생긴건가</description>
        
      
      
      
      <content:encoded><![CDATA[<h2 id="for-else문"><a href="#for-else문" class="headerlink" title="for-else문?"></a>for-else문?</h2><p>파이썬에는 특이하게 for-else문이 존재합니다.<br>어떻게 생긴건가 궁금하시죠?</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">5</span>):</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&#x27;for문 i=<span class="subst">&#123;i&#125;</span>&#x27;</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&#x27;for문 종료&#x27;</span>)</span><br></pre></td></tr></table></figure><p>이런 코드가 있을 때, 출력 결과는 이렇습니다.</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span>문 i=0</span><br><span class="line"><span class="keyword">for</span>문 i=1</span><br><span class="line"><span class="keyword">for</span>문 i=2</span><br><span class="line"><span class="keyword">for</span>문 i=3</span><br><span class="line"><span class="keyword">for</span>문 i=4</span><br><span class="line"><span class="keyword">for</span>문 종료</span><br></pre></td></tr></table></figure><p>for-else문에서 else문이 작동하는 조건은 for문에 break가 걸리지 않았을 때에만 작동하게 됩니다.</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">5</span>):</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&#x27;for문 i=<span class="subst">&#123;i&#125;</span>&#x27;</span>)</span><br><span class="line">    <span class="keyword">if</span> i == <span class="number">4</span>: <span class="keyword">break</span></span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    <span class="comment"># i가 4일 때 break가 작동했기에, else문은 작동 안함</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&#x27;for문 종료&#x27;</span>)</span><br></pre></td></tr></table></figure><p>이와 같은 특성때문에, for문 내부에 break가 작동했는지 안했는지 여부를 확인할 수 있고, 끝까지 for문을 돌게 되었을 때에만 특정 코드를 실행시킬 수도 있습니다.</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">breakPoint = <span class="built_in">int</span>(<span class="built_in">input</span>()) <span class="comment"># 입력값에 따라 break 위치 지정</span></span><br><span class="line">isLoop = <span class="literal">False</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">5</span>):</span><br><span class="line">    <span class="keyword">if</span> i == breakPoint: <span class="keyword">break</span></span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    isLoop = <span class="literal">True</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> isLoop <span class="keyword">is</span> <span class="literal">True</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;for문이 끝까지 동작함&#x27;</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;for문이 도중에 정지됨&#x27;</span>)</span><br></pre></td></tr></table></figure><p>입력에 따라 for문이 도중에 정지했는지 안했는지를 isLoop 변수로 확인할 수 있게 됩니다.</p>]]></content:encoded>
      
      
      <category domain="https://westreed.github.io/categories/%ED%94%84%EB%A1%9C%EA%B7%B8%EB%9E%98%EB%B0%8D/">프로그래밍</category>
      
      <category domain="https://westreed.github.io/categories/%ED%94%84%EB%A1%9C%EA%B7%B8%EB%9E%98%EB%B0%8D/Python/">Python</category>
      
      
      <category domain="https://westreed.github.io/tags/%ED%94%84%EB%A1%9C%EA%B7%B8%EB%9E%98%EB%B0%8D/">프로그래밍</category>
      
      <category domain="https://westreed.github.io/tags/Python/">Python</category>
      
      
      <comments>https://westreed.github.io/2023/01/03/202301/for-else%EB%AC%B8-%ED%99%9C%EC%9A%A9%ED%95%98%EA%B8%B0/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>(2019카카오개발자겨울인턴십) 크레인 인형뽑기 게임</title>
      <link>https://westreed.github.io/2023/01/02/202301/(2019%EC%B9%B4%EC%B9%B4%EC%98%A4%EA%B0%9C%EB%B0%9C%EC%9E%90%EA%B2%A8%EC%9A%B8%EC%9D%B8%ED%84%B4%EC%8B%AD)-%ED%81%AC%EB%A0%88%EC%9D%B8-%EC%9D%B8%ED%98%95%EB%BD%91%EA%B8%B0-%EA%B2%8C%EC%9E%84/</link>
      <guid>https://westreed.github.io/2023/01/02/202301/(2019%EC%B9%B4%EC%B9%B4%EC%98%A4%EA%B0%9C%EB%B0%9C%EC%9E%90%EA%B2%A8%EC%9A%B8%EC%9D%B8%ED%84%B4%EC%8B%AD)-%ED%81%AC%EB%A0%88%EC%9D%B8-%EC%9D%B8%ED%98%95%EB%BD%91%EA%B8%B0-%EA%B2%8C%EC%9E%84/</guid>
      <pubDate>Mon, 02 Jan 2023 06:45:01 GMT</pubDate>
      
        
        
      <description>&lt;h2 id=&quot;문제설명&quot;&gt;&lt;a href=&quot;#문제설명&quot; class=&quot;headerlink&quot; title=&quot;문제설명&quot;&gt;&lt;/a&gt;문제설명&lt;/h2&gt;&lt;p&gt;게임개발자인 “죠르디”는 크레인 인형뽑기 기계를 모바일 게임으로 만들려고 합니다.&lt;br&gt;“죠르디”는 게임의 재미</description>
        
      
      
      
      <content:encoded><![CDATA[<h2 id="문제설명"><a href="#문제설명" class="headerlink" title="문제설명"></a>문제설명</h2><p>게임개발자인 “죠르디”는 크레인 인형뽑기 기계를 모바일 게임으로 만들려고 합니다.<br>“죠르디”는 게임의 재미를 높이기 위해 화면 구성과 규칙을 다음과 같이 게임 로직에 반영하려고 합니다.</p><img src="https://cdn.jsdelivr.net/gh/westreed/westreed.github.io@main/images/202301/crane_game_101.png?style=centerme" alt="크레인게임 이미지"/><p>게임 화면은 “1 x 1” 크기의 칸들로 이루어진 “N x N” 크기의 정사각 격자이며 위쪽에는 크레인이 있고 오른쪽에는 바구니가 있습니다. (위 그림은 “5 x 5” 크기의 예시입니다). 각 격자 칸에는 다양한 인형이 들어 있으며 인형이 없는 칸은 빈칸입니다. 모든 인형은 “1 x 1” 크기의 격자 한 칸을 차지하며 격자의 가장 아래 칸부터 차곡차곡 쌓여 있습니다. 게임 사용자는 크레인을 좌우로 움직여서 멈춘 위치에서 가장 위에 있는 인형을 집어 올릴 수 있습니다. 집어 올린 인형은 바구니에 쌓이게 되는 데, 이때 바구니의 가장 아래 칸부터 인형이 순서대로 쌓이게 됩니다. 다음 그림은 <code>[1번, 5번, 3번]</code> 위치에서 순서대로 인형을 집어 올려 바구니에 담은 모습입니다.</p><img src="https://cdn.jsdelivr.net/gh/westreed/westreed.github.io@main/images/202301/crane_game_102.png?style=centerme" alt="크레인게임 이미지"/><p>만약 같은 모양의 인형 두 개가 바구니에 연속해서 쌓이게 되면 두 인형은 터뜨려지면서 바구니에서 사라지게 됩니다. 위 상태에서 이어서 <code>[5번]</code> 위치에서 인형을 집어 바구니에 쌓으면 같은 모양 인형 두 개가 없어집니다.</p><img src="https://cdn.jsdelivr.net/gh/westreed/westreed.github.io@main/images/202301/crane_game_103.gif?style=centerme" alt="크레인게임 이미지"/><p>크레인 작동 시 인형이 집어지지 않는 경우는 없으나 만약 인형이 없는 곳에서 크레인을 작동시키는 경우에는 아무런 일도 일어나지 않습니다. 또한 바구니는 모든 인형이 들어갈 수 있을 만큼 충분히 크다고 가정합니다. (그림에서는 화면표시 제약으로 5칸만으로 표현하였음)</p><p>게임 화면의 격자의 상태가 담긴 2차원 배열 board와 인형을 집기 위해 크레인을 작동시킨 위치가 담긴 배열 moves가 매개변수로 주어질 때, 크레인을 모두 작동시킨 후 터트려져 사라진 인형의 개수를 return 하도록 solution 함수를 완성해주세요.</p><p>출처<br><a href="https://programmers.co.kr/learn/courses/30/lessons/64061">https://programmers.co.kr/learn/courses/30/lessons/64061</a></p><h2 id="제한사항"><a href="#제한사항" class="headerlink" title="제한사항"></a>제한사항</h2><ul><li>board 배열은 2차원 배열로 크기는 “5 x 5” 이상 “30 x 30” 이하입니다.</li><li>board의 각 칸에는 0 이상 100 이하인 정수가 담겨있습니다.</li><li>0은 빈 칸을 나타냅니다.</li><li>1 ~ 100의 각 숫자는 각기 다른 인형의 모양을 의미하며 같은 숫자는 같은 모양의 인형을 나타냅니다.</li><li>moves 배열의 크기는 1 이상 1,000 이하입니다.</li><li>moves 배열 각 원소들의 값은 1 이상이며 board 배열의 가로 크기 이하인 자연수입니다.</li></ul><h2 id="입출력문"><a href="#입출력문" class="headerlink" title="입출력문"></a>입출력문</h2><table><thead><tr><th>board</th><th>moves</th><th>result</th></tr></thead><tbody><tr><td><code>[[0,0,0,0,0],[0,0,1,0,3],[0,2,5,0,1],[4,2,4,4,2],[3,5,1,3,1]]</code></td><td><code>[1,5,3,5,1,2,1,4]</code></td><td>4</td></tr></tbody></table><h2 id="문제해설"><a href="#문제해설" class="headerlink" title="문제해설"></a>문제해설</h2><p>moves 에 의해 특정원소를 스택구조에 담아서, 이전 스택값과 현재스택값이 같으면 result값을 1 더하는 식으로 해석할 수 있습니다.</p><p>board의 1행인 <code>[0,0,0,0,0],[0,0,1,0,3],[0,2,5,0,1],[4,2,4,4,2],[3,5,1,3,1]</code>값은 바구니에 담긴 인형들의 각 라인을 의미합니다. <code>board[0]</code>은 바구니의 최상단 라인인 셈이죠.</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">solution</span>(<span class="params">board, moves</span>):</span><br><span class="line">    choose = [] <span class="comment"># 뽑은 인형 리스트</span></span><br><span class="line">    front = -<span class="number">1</span> <span class="comment"># Stack</span></span><br><span class="line">    Answer = <span class="number">0</span> <span class="comment"># 정답</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> m <span class="keyword">in</span> moves: <span class="comment"># 크레인 행동</span></span><br><span class="line">        <span class="keyword">for</span> l <span class="keyword">in</span> board: <span class="comment"># 각 라인 검색</span></span><br><span class="line">            <span class="keyword">if</span> l[m-<span class="number">1</span>] == <span class="number">0</span>: <span class="keyword">continue</span></span><br><span class="line">            <span class="comment"># 해당 라인이 0이면 ( 인형이 없는 경우 )</span></span><br><span class="line">            choose.append(l[m-<span class="number">1</span>]) <span class="comment"># 인형을 적재리스트에 넣기</span></span><br><span class="line">            front += <span class="number">1</span></span><br><span class="line"></span><br><span class="line">            <span class="comment"># 스택에 2개이상 값이 있고, 두 인형이 같을 때</span></span><br><span class="line">            <span class="keyword">if</span> front &gt; <span class="number">0</span> <span class="keyword">and</span> choose[front] == choose[front-<span class="number">1</span>]:</span><br><span class="line">                <span class="keyword">del</span> choose[front]</span><br><span class="line">                <span class="keyword">del</span> choose[front-<span class="number">1</span>]</span><br><span class="line">                front -= <span class="number">2</span></span><br><span class="line">                Answer += <span class="number">2</span></span><br><span class="line">            </span><br><span class="line">            l[m-<span class="number">1</span>] = <span class="number">0</span> <span class="comment"># 인형을 뽑았으므로 해당 칸은 0으로 대입</span></span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> Answer</span><br></pre></td></tr></table></figure>]]></content:encoded>
      
      
      <category domain="https://westreed.github.io/categories/%ED%94%84%EB%A1%9C%EA%B7%B8%EB%9E%98%EB%B0%8D/">프로그래밍</category>
      
      <category domain="https://westreed.github.io/categories/%ED%94%84%EB%A1%9C%EA%B7%B8%EB%9E%98%EB%B0%8D/Python/">Python</category>
      
      
      <category domain="https://westreed.github.io/tags/%ED%94%84%EB%A1%9C%EA%B7%B8%EB%9E%98%EB%B0%8D/">프로그래밍</category>
      
      <category domain="https://westreed.github.io/tags/Python/">Python</category>
      
      <category domain="https://westreed.github.io/tags/%EC%BD%94%EB%94%A9%ED%85%8C%EC%8A%A4%ED%8A%B8/">코딩테스트</category>
      
      
      <comments>https://westreed.github.io/2023/01/02/202301/(2019%EC%B9%B4%EC%B9%B4%EC%98%A4%EA%B0%9C%EB%B0%9C%EC%9E%90%EA%B2%A8%EC%9A%B8%EC%9D%B8%ED%84%B4%EC%8B%AD)-%ED%81%AC%EB%A0%88%EC%9D%B8-%EC%9D%B8%ED%98%95%EB%BD%91%EA%B8%B0-%EA%B2%8C%EC%9E%84/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>(2020카카오공채) 문자열 압축 문제</title>
      <link>https://westreed.github.io/2023/01/02/202301/(2020%EC%B9%B4%EC%B9%B4%EC%98%A4%EA%B3%B5%EC%B1%84)-%EB%AC%B8%EC%9E%90%EC%97%B4-%EC%95%95%EC%B6%95-%EB%AC%B8%EC%A0%9C/</link>
      <guid>https://westreed.github.io/2023/01/02/202301/(2020%EC%B9%B4%EC%B9%B4%EC%98%A4%EA%B3%B5%EC%B1%84)-%EB%AC%B8%EC%9E%90%EC%97%B4-%EC%95%95%EC%B6%95-%EB%AC%B8%EC%A0%9C/</guid>
      <pubDate>Mon, 02 Jan 2023 06:35:28 GMT</pubDate>
      
        
        
      <description>&lt;h2 id=&quot;문제설명&quot;&gt;&lt;a href=&quot;#문제설명&quot; class=&quot;headerlink&quot; title=&quot;문제설명&quot;&gt;&lt;/a&gt;문제설명&lt;/h2&gt;&lt;p&gt;데이터 처리 전문가가 되고 싶은 어피치는 문자열을 압축하는 방법에 대해 공부를 하고 있습니다. 최근에 대량의 데</description>
        
      
      
      
      <content:encoded><![CDATA[<h2 id="문제설명"><a href="#문제설명" class="headerlink" title="문제설명"></a>문제설명</h2><p>데이터 처리 전문가가 되고 싶은 어피치는 문자열을 압축하는 방법에 대해 공부를 하고 있습니다. 최근에 대량의 데이터 처리를 위한 간단한 비손실 압축 방법에 대해 공부를 하고 있는데, 문자열에서 같은 값이 연속해서 나타나는 것을 그 문자의 개수와 반복되는 값으로 표현하여 더 짧은 문자열로 줄여서 표현하는 알고리즘을 공부하고 있습니다.</p><p>간단한 예로 aabbaccc의 경우 2a2ba3c(문자가 반복되지 않아 한번만 나타난 경우 1은 생략함)와 같이 표현할 수 있는데, 이러한 방식은 반복되는 문자가 적은 경우 압축률이 낮다는 단점이 있습니다. 예를 들면, abcabcdede와 같은 문자열은 전혀 압축되지 않습니다. 어피치는 이러한 단점을 해결하기 위해 문자열을 1개 이상의 단위로 잘라서 압축하여 더 짧은 문자열로 표현할 수 있는지 방법을 찾아보려고 합니다.</p><p>예를 들어, ababcdcdababcdcd의 경우 문자를 1개 단위로 자르면 전혀 압축되지 않지만, 2개 단위로 잘라서 압축한다면 2ab2cd2ab2cd로 표현할 수 있습니다. 다른 방법으로 8개 단위로 잘라서 압축한다면 2ababcdcd로 표현할 수 있으며, 이때가 가장 짧게 압축하여 표현할 수 있는 방법입니다.</p><p>다른 예로, abcabcdede와 같은 경우, 문자를 2개 단위로 잘라서 압축하면 abcabc2de가 되지만, 3개 단위로 자른다면 2abcdede가 되어 3개 단위가 가장 짧은 압축 방법이 됩니다. 이때 3개 단위로 자르고 마지막에 남는 문자열은 그대로 붙여주면 됩니다.</p><p>압축할 문자열 s가 매개변수로 주어질 때, 위에 설명한 방법으로 1개 이상 단위로 문자열을 잘라 압축하여 표현한 문자열 중 가장 짧은 것의 길이를 return 하도록 solution 함수를 완성해주세요.</p><h2 id="제한사항"><a href="#제한사항" class="headerlink" title="제한사항"></a>제한사항</h2><ul><li>s의 길이는 1 이상 1,000 이하입니다.</li><li>s는 알파벳 소문자로만 이루어져 있습니다.</li></ul><h2 id="입출력문"><a href="#입출력문" class="headerlink" title="입출력문"></a>입출력문</h2><table><thead><tr><th>S</th><th>Result</th></tr></thead><tbody><tr><td>“aabbaccc”</td><td>7</td></tr><tr><td>“ababcdcdababcdcd”</td><td>9</td></tr><tr><td>“abcabcdede”</td><td>8</td></tr><tr><td>“abcabcabcabcdededededede”</td><td>14</td></tr><tr><td>“xababcdcdababcdcd”</td><td>17</td></tr></tbody></table><h2 id="문제해설"><a href="#문제해설" class="headerlink" title="문제해설"></a>문제해설</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> math</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">solution</span>(<span class="params">s</span>):</span><br><span class="line">    s_len = <span class="built_in">len</span>(s)</span><br><span class="line">    ans_list = []</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>,s_len+<span class="number">1</span>):</span><br><span class="line">        t = math.ceil(s_len/i)</span><br><span class="line">        t1 = <span class="number">0</span></span><br><span class="line">        index = <span class="number">0</span></span><br><span class="line">        num = <span class="number">1</span></span><br><span class="line">        answer = <span class="string">&quot;&quot;</span></span><br><span class="line">        temp = <span class="string">&quot;&quot;</span></span><br><span class="line">        temp2 = <span class="string">&quot;&quot;</span></span><br><span class="line">        <span class="keyword">while</span> (t1 &lt; t):</span><br><span class="line">            temp = s[index:index+i]</span><br><span class="line">            <span class="keyword">if</span> (t1 != <span class="number">0</span>):</span><br><span class="line">                temp2 = s[index-i:index]</span><br><span class="line">                <span class="keyword">if</span> (temp == temp2):</span><br><span class="line">                    num += <span class="number">1</span></span><br><span class="line">            <span class="keyword">if</span> (num == <span class="number">1</span>):</span><br><span class="line">                answer = answer + temp2</span><br><span class="line">            <span class="keyword">if</span> (num &gt;= <span class="number">2</span> <span class="keyword">and</span> t1 != <span class="number">0</span> <span class="keyword">and</span> temp2 != temp):</span><br><span class="line">                answer = answer + <span class="built_in">str</span>(num) + temp2</span><br><span class="line">                num = <span class="number">1</span></span><br><span class="line">            index += i</span><br><span class="line">            t1 += <span class="number">1</span></span><br><span class="line">        <span class="keyword">if</span> (t1==t):</span><br><span class="line">            <span class="keyword">if</span> (num&gt;=<span class="number">2</span>):</span><br><span class="line">                answer = answer + <span class="built_in">str</span>(num) + temp2</span><br><span class="line">                num = <span class="number">1</span></span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                temp2 = s[index-i:index]</span><br><span class="line">                answer = answer + temp2</span><br><span class="line">        ans_list.append(<span class="built_in">len</span>(answer))</span><br><span class="line">    ans_list.sort()</span><br><span class="line">    <span class="keyword">return</span> ans_list[<span class="number">0</span>]</span><br></pre></td></tr></table></figure><p>무작정 코드를 써내려가서 많이 지져분합니다.. ㅎㅎ<br>언어를 파이썬으로 작성했기 때문에 쉽게 해결할 수 있었던 것 같습니다.</p>]]></content:encoded>
      
      
      <category domain="https://westreed.github.io/categories/%ED%94%84%EB%A1%9C%EA%B7%B8%EB%9E%98%EB%B0%8D/">프로그래밍</category>
      
      <category domain="https://westreed.github.io/categories/%ED%94%84%EB%A1%9C%EA%B7%B8%EB%9E%98%EB%B0%8D/Python/">Python</category>
      
      
      <category domain="https://westreed.github.io/tags/%ED%94%84%EB%A1%9C%EA%B7%B8%EB%9E%98%EB%B0%8D/">프로그래밍</category>
      
      <category domain="https://westreed.github.io/tags/Python/">Python</category>
      
      <category domain="https://westreed.github.io/tags/%EC%BD%94%EB%94%A9%ED%85%8C%EC%8A%A4%ED%8A%B8/">코딩테스트</category>
      
      
      <comments>https://westreed.github.io/2023/01/02/202301/(2020%EC%B9%B4%EC%B9%B4%EC%98%A4%EA%B3%B5%EC%B1%84)-%EB%AC%B8%EC%9E%90%EC%97%B4-%EC%95%95%EC%B6%95-%EB%AC%B8%EC%A0%9C/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>리눅스에 git 설치하기</title>
      <link>https://westreed.github.io/2023/01/02/202301/%EB%A6%AC%EB%88%85%EC%8A%A4%EC%97%90-git-%EC%84%A4%EC%B9%98%ED%95%98%EA%B8%B0/</link>
      <guid>https://westreed.github.io/2023/01/02/202301/%EB%A6%AC%EB%88%85%EC%8A%A4%EC%97%90-git-%EC%84%A4%EC%B9%98%ED%95%98%EA%B8%B0/</guid>
      <pubDate>Mon, 02 Jan 2023 06:29:51 GMT</pubDate>
      
        
        
      <description>&lt;h2 id=&quot;Git-설치하기&quot;&gt;&lt;a href=&quot;#Git-설치하기&quot; class=&quot;headerlink&quot; title=&quot;Git 설치하기&quot;&gt;&lt;/a&gt;Git 설치하기&lt;/h2&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td cla</description>
        
      
      
      
      <content:encoded><![CDATA[<h2 id="Git-설치하기"><a href="#Git-설치하기" class="headerlink" title="Git 설치하기"></a>Git 설치하기</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo apt-get install git</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo apt install git</span><br></pre></td></tr></table></figure><h2 id="Git-초기설정"><a href="#Git-초기설정" class="headerlink" title="Git 초기설정"></a>Git 초기설정</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git --version <span class="comment"># 버젼확인</span></span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git config --global user.name <span class="string">&quot;이름&quot;</span></span><br><span class="line">git config --global user.mail <span class="string">&quot;메일주소&quot;</span></span><br></pre></td></tr></table></figure><h2 id="Git-프로젝트-복사하기"><a href="#Git-프로젝트-복사하기" class="headerlink" title="Git 프로젝트 복사하기"></a>Git 프로젝트 복사하기</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git <span class="built_in">clone</span> 프로젝트주소</span><br></pre></td></tr></table></figure>]]></content:encoded>
      
      
      <category domain="https://westreed.github.io/categories/Git/">Git</category>
      
      
      <category domain="https://westreed.github.io/tags/%ED%94%84%EB%A1%9C%EA%B7%B8%EB%9E%98%EB%B0%8D/">프로그래밍</category>
      
      <category domain="https://westreed.github.io/tags/Git/">Git</category>
      
      <category domain="https://westreed.github.io/tags/%EB%A6%AC%EB%88%85%EC%8A%A4/">리눅스</category>
      
      
      <comments>https://westreed.github.io/2023/01/02/202301/%EB%A6%AC%EB%88%85%EC%8A%A4%EC%97%90-git-%EC%84%A4%EC%B9%98%ED%95%98%EA%B8%B0/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>Git rm에 대해서</title>
      <link>https://westreed.github.io/2023/01/02/202301/git-rm%EC%97%90-%EB%8C%80%ED%95%B4%EC%84%9C/</link>
      <guid>https://westreed.github.io/2023/01/02/202301/git-rm%EC%97%90-%EB%8C%80%ED%95%B4%EC%84%9C/</guid>
      <pubDate>Mon, 02 Jan 2023 06:20:04 GMT</pubDate>
      
        
        
      <description>&lt;h2 id=&quot;rm-명령어&quot;&gt;&lt;a href=&quot;#rm-명령어&quot; class=&quot;headerlink&quot; title=&quot;rm 명령어&quot;&gt;&lt;/a&gt;rm 명령어&lt;/h2&gt;&lt;p&gt;.gitignore에 등록한 파일이 이미 repo에 업로드된 경우&lt;/p&gt;
&lt;figure class</description>
        
      
      
      
      <content:encoded><![CDATA[<h2 id="rm-명령어"><a href="#rm-명령어" class="headerlink" title="rm 명령어"></a>rm 명령어</h2><p>.gitignore에 등록한 파일이 이미 repo에 업로드된 경우</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git <span class="built_in">rm</span> --cached &lt;Filename&gt;</span><br></pre></td></tr></table></figure><p>명령어를 통해, 파일을 제거하고 다시 push 하면 된다.<br>–cached는 스테이징 영역에서만 파일이 삭제된다. 작업 디렉토리나 저장소에서는 삭제하지 않겠다는 의미이다.</p><p>참고로,</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">rm</span> &lt;Filename&gt; <span class="comment">#앞에 git이 붙지 않은 rm은 작업 디렉토리에서 파일을 삭제하는 명령어</span></span><br><span class="line">git <span class="built_in">rm</span> &lt;Filename&gt; <span class="comment">#작업 디렉토리 및 스테이징 영역 모두 삭제</span></span><br></pre></td></tr></table></figure><p>이렇게 git 여부에 따라, 원격저장소의 파일을 삭제할지 파일저장소의 파일을 삭제할지 정할 수 있다.</p>]]></content:encoded>
      
      
      <category domain="https://westreed.github.io/categories/Git/">Git</category>
      
      
      <category domain="https://westreed.github.io/tags/%ED%94%84%EB%A1%9C%EA%B7%B8%EB%9E%98%EB%B0%8D/">프로그래밍</category>
      
      <category domain="https://westreed.github.io/tags/Git/">Git</category>
      
      
      <comments>https://westreed.github.io/2023/01/02/202301/git-rm%EC%97%90-%EB%8C%80%ED%95%B4%EC%84%9C/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>포스트에 이미지와 유튜브영상 올려보기</title>
      <link>https://westreed.github.io/2022/12/27/202212/%ED%8F%AC%EC%8A%A4%ED%8A%B8%EC%97%90-%EC%9D%B4%EB%AF%B8%EC%A7%80%EC%99%80-%EC%9C%A0%ED%8A%9C%EB%B8%8C%EC%98%81%EC%83%81-%EC%98%AC%EB%A0%A4%EB%B3%B4%EA%B8%B0/</link>
      <guid>https://westreed.github.io/2022/12/27/202212/%ED%8F%AC%EC%8A%A4%ED%8A%B8%EC%97%90-%EC%9D%B4%EB%AF%B8%EC%A7%80%EC%99%80-%EC%9C%A0%ED%8A%9C%EB%B8%8C%EC%98%81%EC%83%81-%EC%98%AC%EB%A0%A4%EB%B3%B4%EA%B8%B0/</guid>
      <pubDate>Tue, 27 Dec 2022 12:03:14 GMT</pubDate>
      
        
        
      <description>&lt;h2 id=&quot;이미지-업로드하기&quot;&gt;&lt;a href=&quot;#이미지-업로드하기&quot; class=&quot;headerlink&quot; title=&quot;이미지 업로드하기&quot;&gt;&lt;/a&gt;이미지 업로드하기&lt;/h2&gt;&lt;img src=&quot;https://cdn.jsdelivr.net/gh/westree</description>
        
      
      
      
      <content:encoded><![CDATA[<h2 id="이미지-업로드하기"><a href="#이미지-업로드하기" class="headerlink" title="이미지 업로드하기"></a>이미지 업로드하기</h2><img src="https://cdn.jsdelivr.net/gh/westreed/westreed.github.io@main/images/202212/robot.gif?style=centerme" alt="업로드된 이미지"/><p>source폴더 안에 images 폴더를 하나 만들어두고, 해당 폴더 안에 이미지를 넣어서 사용해야한다.<br>포스트 제목과 같은 폴더를 하나 만든 후, 해당 폴더 안에 이미지를 넣어두고, 아래 코드처럼 작성하면 이미지를 불러올 수 있다.</p><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;/images/파일명.확장자?style=centerme&quot;</span> <span class="attr">alt</span>=<span class="string">&quot;이미지설명&quot;</span>/&gt;</span></span><br></pre></td></tr></table></figure><p>조오금 불편하긴 하지만 익숙해져야 할듯..<br>뒤에 <font color="#c0504d">style&#x3D;centerme</font>는 <a href="https://datadoctorblog.com/2020/03/24/HEXO-ICARUS-thumbnail/">링크</a>를 참고했다. style로 centerme를 주면 이미지가 자동으로 가운데정렬이 되는 방식.</p><h2 id="유튜브-영상-올리기"><a href="#유튜브-영상-올리기" class="headerlink" title="유튜브 영상 올리기"></a>유튜브 영상 올리기</h2><div class="video-container"><iframe src="https://www.youtube.com/embed/TdjbenWWSxc" frameborder="0" loading="lazy" allowfullscreen></iframe></div><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">&#123;% youtube 영상링크 %&#125;</span><br><span class="line"></span><br><span class="line">ex. &#123;% youtube TdjbenWWSxc %&#125;</span><br></pre></td></tr></table></figure><p>그나마 유튜브는 Hexo에서 지원하는 양식을 사용하는게 제일 편하다.<br>영상링크의 모든 주소는 아니고 <span style="background:#b1ffff">id값</span>만 가져오면 된다.</p>]]></content:encoded>
      
      
      <category domain="https://westreed.github.io/categories/Hexo/">Hexo</category>
      
      
      <category domain="https://westreed.github.io/tags/%ED%94%84%EB%A1%9C%EA%B7%B8%EB%9E%98%EB%B0%8D/">프로그래밍</category>
      
      <category domain="https://westreed.github.io/tags/Hexo/">Hexo</category>
      
      <category domain="https://westreed.github.io/tags/Icarus/">Icarus</category>
      
      
      <comments>https://westreed.github.io/2022/12/27/202212/%ED%8F%AC%EC%8A%A4%ED%8A%B8%EC%97%90-%EC%9D%B4%EB%AF%B8%EC%A7%80%EC%99%80-%EC%9C%A0%ED%8A%9C%EB%B8%8C%EC%98%81%EC%83%81-%EC%98%AC%EB%A0%A4%EB%B3%B4%EA%B8%B0/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>Hello World</title>
      <link>https://westreed.github.io/2022/12/26/202212/hello-world/</link>
      <guid>https://westreed.github.io/2022/12/26/202212/hello-world/</guid>
      <pubDate>Mon, 26 Dec 2022 07:05:39 GMT</pubDate>
      
        
        
      <description>&lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.io/docs/&quot;&gt;documentation&lt;/a&gt; for</description>
        
      
      
      
      <content:encoded><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content:encoded>
      
      
      
      
      <comments>https://westreed.github.io/2022/12/26/202212/hello-world/#disqus_thread</comments>
      
    </item>
    
  </channel>
</rss>
