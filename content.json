{"posts":[{"title":"Hello World","text":"Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post1$ hexo new &quot;My New Post&quot; More info: Writing Run server1$ hexo server More info: Server Generate static files1$ hexo generate More info: Generating Deploy to remote sites1$ hexo deploy More info: Deployment","link":"/2022/12/26/202212/hello-world/"},{"title":"포스트에 이미지와 유튜브영상 올려보기","text":"이미지 업로드하기 source폴더 안에 images 폴더를 하나 만들어두고, 해당 폴더 안에 이미지를 넣어서 사용해야한다.포스트 제목과 같은 폴더를 하나 만든 후, 해당 폴더 안에 이미지를 넣어두고, 아래 코드처럼 작성하면 이미지를 불러올 수 있다. 1&lt;img src=&quot;/images/파일명.확장자?style=centerme&quot; alt=&quot;이미지설명&quot;/&gt; 조오금 불편하긴 하지만 익숙해져야 할듯..뒤에 style=centerme는 링크를 참고했다. style로 centerme를 주면 이미지가 자동으로 가운데정렬이 되는 방식. 유튜브 영상 올리기 123{% youtube 영상링크 %}ex. {% youtube TdjbenWWSxc %} 그나마 유튜브는 Hexo에서 지원하는 양식을 사용하는게 제일 편하다.영상링크의 모든 주소는 아니고 id값만 가져오면 된다.","link":"/2022/12/27/202212/%ED%8F%AC%EC%8A%A4%ED%8A%B8%EC%97%90-%EC%9D%B4%EB%AF%B8%EC%A7%80%EC%99%80-%EC%9C%A0%ED%8A%9C%EB%B8%8C%EC%98%81%EC%83%81-%EC%98%AC%EB%A0%A4%EB%B3%B4%EA%B8%B0/"},{"title":"(2019카카오개발자겨울인턴십) 크레인 인형뽑기 게임","text":"문제설명게임개발자인 “죠르디”는 크레인 인형뽑기 기계를 모바일 게임으로 만들려고 합니다.“죠르디”는 게임의 재미를 높이기 위해 화면 구성과 규칙을 다음과 같이 게임 로직에 반영하려고 합니다. 게임 화면은 “1 x 1” 크기의 칸들로 이루어진 “N x N” 크기의 정사각 격자이며 위쪽에는 크레인이 있고 오른쪽에는 바구니가 있습니다. (위 그림은 “5 x 5” 크기의 예시입니다). 각 격자 칸에는 다양한 인형이 들어 있으며 인형이 없는 칸은 빈칸입니다. 모든 인형은 “1 x 1” 크기의 격자 한 칸을 차지하며 격자의 가장 아래 칸부터 차곡차곡 쌓여 있습니다. 게임 사용자는 크레인을 좌우로 움직여서 멈춘 위치에서 가장 위에 있는 인형을 집어 올릴 수 있습니다. 집어 올린 인형은 바구니에 쌓이게 되는 데, 이때 바구니의 가장 아래 칸부터 인형이 순서대로 쌓이게 됩니다. 다음 그림은 [1번, 5번, 3번] 위치에서 순서대로 인형을 집어 올려 바구니에 담은 모습입니다. 만약 같은 모양의 인형 두 개가 바구니에 연속해서 쌓이게 되면 두 인형은 터뜨려지면서 바구니에서 사라지게 됩니다. 위 상태에서 이어서 [5번] 위치에서 인형을 집어 바구니에 쌓으면 같은 모양 인형 두 개가 없어집니다. 크레인 작동 시 인형이 집어지지 않는 경우는 없으나 만약 인형이 없는 곳에서 크레인을 작동시키는 경우에는 아무런 일도 일어나지 않습니다. 또한 바구니는 모든 인형이 들어갈 수 있을 만큼 충분히 크다고 가정합니다. (그림에서는 화면표시 제약으로 5칸만으로 표현하였음) 게임 화면의 격자의 상태가 담긴 2차원 배열 board와 인형을 집기 위해 크레인을 작동시킨 위치가 담긴 배열 moves가 매개변수로 주어질 때, 크레인을 모두 작동시킨 후 터트려져 사라진 인형의 개수를 return 하도록 solution 함수를 완성해주세요. 출처https://programmers.co.kr/learn/courses/30/lessons/64061 제한사항 board 배열은 2차원 배열로 크기는 “5 x 5” 이상 “30 x 30” 이하입니다. board의 각 칸에는 0 이상 100 이하인 정수가 담겨있습니다. 0은 빈 칸을 나타냅니다. 1 ~ 100의 각 숫자는 각기 다른 인형의 모양을 의미하며 같은 숫자는 같은 모양의 인형을 나타냅니다. moves 배열의 크기는 1 이상 1,000 이하입니다. moves 배열 각 원소들의 값은 1 이상이며 board 배열의 가로 크기 이하인 자연수입니다. 입출력 예 board moves result [[0,0,0,0,0],[0,0,1,0,3],[0,2,5,0,1],[4,2,4,4,2],[3,5,1,3,1]] [1,5,3,5,1,2,1,4] 4 문제해설moves 에 의해 특정원소를 스택구조에 담아서, 이전 스택값과 현재스택값이 같으면 result값을 1 더하는 식으로 해석할 수 있습니다. board의 1행인 [0,0,0,0,0],[0,0,1,0,3],[0,2,5,0,1],[4,2,4,4,2],[3,5,1,3,1]값은 바구니에 담긴 인형들의 각 라인을 의미합니다. board[0]은 바구니의 최상단 라인인 셈이죠. 1234567891011121314151617181920212223def solution(board, moves): choose = [] # 뽑은 인형 리스트 front = -1 # Stack Answer = 0 # 정답 for m in moves: # 크레인 행동 for l in board: # 각 라인 검색 if l[m-1] == 0: continue # 해당 라인이 0이면 ( 인형이 없는 경우 ) choose.append(l[m-1]) # 인형을 적재리스트에 넣기 front += 1 # 스택에 2개이상 값이 있고, 두 인형이 같을 때 if front &gt; 0 and choose[front] == choose[front-1]: del choose[front] del choose[front-1] front -= 2 Answer += 2 l[m-1] = 0 # 인형을 뽑았으므로 해당 칸은 0으로 대입 break return Answer","link":"/2023/01/02/202301/(2019%EC%B9%B4%EC%B9%B4%EC%98%A4%EA%B0%9C%EB%B0%9C%EC%9E%90%EA%B2%A8%EC%9A%B8%EC%9D%B8%ED%84%B4%EC%8B%AD)-%ED%81%AC%EB%A0%88%EC%9D%B8-%EC%9D%B8%ED%98%95%EB%BD%91%EA%B8%B0-%EA%B2%8C%EC%9E%84/"},{"title":"(2020카카오공채) 문자열 압축 문제","text":"문제설명데이터 처리 전문가가 되고 싶은 어피치는 문자열을 압축하는 방법에 대해 공부를 하고 있습니다. 최근에 대량의 데이터 처리를 위한 간단한 비손실 압축 방법에 대해 공부를 하고 있는데, 문자열에서 같은 값이 연속해서 나타나는 것을 그 문자의 개수와 반복되는 값으로 표현하여 더 짧은 문자열로 줄여서 표현하는 알고리즘을 공부하고 있습니다. 간단한 예로 aabbaccc의 경우 2a2ba3c(문자가 반복되지 않아 한번만 나타난 경우 1은 생략함)와 같이 표현할 수 있는데, 이러한 방식은 반복되는 문자가 적은 경우 압축률이 낮다는 단점이 있습니다. 예를 들면, abcabcdede와 같은 문자열은 전혀 압축되지 않습니다. 어피치는 이러한 단점을 해결하기 위해 문자열을 1개 이상의 단위로 잘라서 압축하여 더 짧은 문자열로 표현할 수 있는지 방법을 찾아보려고 합니다. 예를 들어, ababcdcdababcdcd의 경우 문자를 1개 단위로 자르면 전혀 압축되지 않지만, 2개 단위로 잘라서 압축한다면 2ab2cd2ab2cd로 표현할 수 있습니다. 다른 방법으로 8개 단위로 잘라서 압축한다면 2ababcdcd로 표현할 수 있으며, 이때가 가장 짧게 압축하여 표현할 수 있는 방법입니다. 다른 예로, abcabcdede와 같은 경우, 문자를 2개 단위로 잘라서 압축하면 abcabc2de가 되지만, 3개 단위로 자른다면 2abcdede가 되어 3개 단위가 가장 짧은 압축 방법이 됩니다. 이때 3개 단위로 자르고 마지막에 남는 문자열은 그대로 붙여주면 됩니다. 압축할 문자열 s가 매개변수로 주어질 때, 위에 설명한 방법으로 1개 이상 단위로 문자열을 잘라 압축하여 표현한 문자열 중 가장 짧은 것의 길이를 return 하도록 solution 함수를 완성해주세요. 제한사항 s의 길이는 1 이상 1,000 이하입니다. s는 알파벳 소문자로만 이루어져 있습니다. 입출력 예 S Result “aabbaccc” 7 “ababcdcdababcdcd” 9 “abcabcdede” 8 “abcabcabcabcdededededede” 14 “xababcdcdababcdcd” 17 작성한 코드1234567891011121314151617181920212223242526272829303132333435import mathdef solution(s): s_len = len(s) ans_list = [] for i in range(1,s_len+1): t = math.ceil(s_len/i) t1 = 0 index = 0 num = 1 answer = &quot;&quot; temp = &quot;&quot; temp2 = &quot;&quot; while (t1 &lt; t): temp = s[index:index+i] if (t1 != 0): temp2 = s[index-i:index] if (temp == temp2): num += 1 if (num == 1): answer = answer + temp2 if (num &gt;= 2 and t1 != 0 and temp2 != temp): answer = answer + str(num) + temp2 num = 1 index += i t1 += 1 if (t1==t): if (num&gt;=2): answer = answer + str(num) + temp2 num = 1 else: temp2 = s[index-i:index] answer = answer + temp2 ans_list.append(len(answer)) ans_list.sort() return ans_list[0] 무작정 코드를 써내려가서 많이 지져분합니다.. ㅎㅎ언어를 파이썬으로 작성했기 때문에 쉽게 해결할 수 있었던 것 같습니다.","link":"/2023/01/02/202301/(2020%EC%B9%B4%EC%B9%B4%EC%98%A4%EA%B3%B5%EC%B1%84)-%EB%AC%B8%EC%9E%90%EC%97%B4-%EC%95%95%EC%B6%95-%EB%AC%B8%EC%A0%9C/"},{"title":"리눅스에 git 설치하기","text":"Git 설치하기1sudo apt-get install git 1sudo apt install git Git 초기설정1git --version # 버젼확인 12git config --global user.name &quot;이름&quot;git config --global user.mail &quot;메일주소&quot; Git 프로젝트 복사하기1git clone 프로젝트주소","link":"/2023/01/02/202301/%EB%A6%AC%EB%88%85%EC%8A%A4%EC%97%90-git-%EC%84%A4%EC%B9%98%ED%95%98%EA%B8%B0/"},{"title":"Git rm에 대해서","text":"rm 명령어.gitignore에 등록한 파일이 이미 repo에 업로드된 경우 1git rm --cached &lt;Filename&gt; 명령어를 통해, 파일을 제거하고 다시 push 하면 된다.–cached는 스테이징 영역에서만 파일이 삭제된다. 작업 디렉토리나 저장소에서는 삭제하지 않겠다는 의미이다. 참고로, 12rm &lt;Filename&gt; #앞에 git이 붙지 않은 rm은 작업 디렉토리에서 파일을 삭제하는 명령어git rm &lt;Filename&gt; #작업 디렉토리 및 스테이징 영역 모두 삭제 이렇게 git 여부에 따라, 원격저장소의 파일을 삭제할지 파일저장소의 파일을 삭제할지 정할 수 있다.","link":"/2023/01/02/202301/git-rm%EC%97%90-%EB%8C%80%ED%95%B4%EC%84%9C/"}],"tags":[{"name":"프로그래밍","slug":"프로그래밍","link":"/tags/%ED%94%84%EB%A1%9C%EA%B7%B8%EB%9E%98%EB%B0%8D/"},{"name":"Hexo","slug":"Hexo","link":"/tags/Hexo/"},{"name":"Icarus","slug":"Icarus","link":"/tags/Icarus/"},{"name":"Python","slug":"Python","link":"/tags/Python/"},{"name":"코딩테스트","slug":"코딩테스트","link":"/tags/%EC%BD%94%EB%94%A9%ED%85%8C%EC%8A%A4%ED%8A%B8/"},{"name":"Git","slug":"Git","link":"/tags/Git/"},{"name":"리눅스","slug":"리눅스","link":"/tags/%EB%A6%AC%EB%88%85%EC%8A%A4/"}],"categories":[{"name":"Hexo","slug":"Hexo","link":"/categories/Hexo/"},{"name":"Python","slug":"Python","link":"/categories/Python/"},{"name":"Git","slug":"Git","link":"/categories/Git/"}],"pages":[]}